# Chicago Chronic Disease Data Commons - Complete Development Specifications

## Executive Summary
Build a sophisticated, academic-grade web application for visualizing chronic disease prevalence across Chicago using de-identified aggregate data from the Capricorn Network. The application must present complex health data in an accessible, professional manner suitable for researchers, public health officials, and policymakers at Rush University.

## Client-Provided Resources
The client will provide the following files at project start:

1. **chicago-community-boundaries.json** - Geographic boundaries for all 77 Chicago Community Areas
   - Format: GeoJSON FeatureCollection  
   - Properties: community (name), area_num_1 (number), shape_area, shape_len
   - Geometry: MultiPolygon coordinates for each community area
   - Save to: `/data/chicago-community-areas.json`

2. **Mapbox API Access Token** - For map rendering
3. **Census API Key** - For 2020 population data access

## Visual Design System

### Color Palette (Exact Values)
```css
:root {
  /* Rush University Brand Colors */
  --rush-primary: #006747;        /* Primary green */
  --rush-primary-hover: #00513a;  /* Darker green for hover states */
  --rush-primary-light: #008759;  /* Lighter green for accents */
  --rush-primary-faded: #00674720; /* 12% opacity for backgrounds */
  
  /* Dark Mode Background Hierarchy */
  --bg-base: #0a0a0a;            /* Darkest - main background */
  --bg-elevated: #141414;         /* Panels and cards */
  --bg-overlay: #1e1e1e;          /* Dropdowns and modals */
  --bg-hover: #252525;            /* Hover states */
  
  /* Borders and Dividers */
  --border-subtle: #2a2a2a;       /* Subtle borders */
  --border-default: #333333;      /* Default borders */
  --border-strong: #404040;       /* Emphasized borders */
  --border-rush: #006747;         /* Rush green borders */
  
  /* Text Hierarchy */
  --text-primary: #ffffff;        /* Headers and important text */
  --text-secondary: #e0e0e0;      /* Body text */
  --text-tertiary: #b0b0b0;       /* Subdued text */
  --text-muted: #808080;          /* Disabled/placeholder */
  
  /* Data Visualization - Disease Prevalence Gradient */
  --data-lowest: #00674790;       /* 0-5% prevalence (Rush green 56% opacity) */
  --data-low: #4a8c2a;           /* 5-10% prevalence */
  --data-medium: #a4c441;         /* 10-15% prevalence */
  --data-high: #f4e04d;           /* 15-20% prevalence */
  --data-highest: #f76c5e;        /* 20%+ prevalence */
  
  /* Status Colors */
  --status-success: #22c55e;      /* Data complete */
  --status-warning: #eab308;      /* Data incomplete */
  --status-error: #ef4444;        /* Data unavailable */
  --status-suppressed: #6b7280;   /* Privacy suppressed */
  
  /* Interactive States */
  --focus-ring: #00674760;        /* Focus outline color */
  --selection-bg: #00674730;      /* Selected area highlight */
}
```

### Typography System
```css
/* Import academic-appropriate fonts */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=IBM+Plex+Mono:wght@400;500&display=swap');

/* Font Stack */
--font-primary: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
--font-mono: 'IBM Plex Mono', 'Consolas', monospace;

/* Type Scale */
--text-xs: 0.75rem;      /* 12px - metadata */
--text-sm: 0.875rem;     /* 14px - labels */
--text-base: 1rem;       /* 16px - body */
--text-lg: 1.125rem;     /* 18px - subheadings */
--text-xl: 1.25rem;      /* 20px - section headers */
--text-2xl: 1.5rem;      /* 24px - page title */
--text-3xl: 2rem;        /* 32px - main title */

/* Font Weights */
--font-normal: 400;
--font-medium: 500;
--font-semibold: 600;
--font-bold: 700;

/* Line Heights */
--leading-tight: 1.25;
--leading-normal: 1.5;
--leading-relaxed: 1.625;
```

### Spacing System
```css
/* Consistent spacing scale */
--space-1: 0.25rem;   /* 4px */
--space-2: 0.5rem;    /* 8px */
--space-3: 0.75rem;   /* 12px */
--space-4: 1rem;      /* 16px */
--space-5: 1.25rem;   /* 20px */
--space-6: 1.5rem;    /* 24px */
--space-8: 2rem;      /* 32px */
--space-10: 2.5rem;   /* 40px */
--space-12: 3rem;     /* 48px */
--space-16: 4rem;     /* 64px */
```

## Component Specifications

### 1. Header Component
```html
<header class="main-header">
  <div class="header-content">
    <div class="branding">
      <h1 class="site-title">Chicago Chronic Disease Data Commons</h1>
      <p class="site-subtitle">Rush University Health Equity Analytics Studio</p>
    </div>
    <nav class="header-nav">
      <a href="#about" class="nav-link">About</a>
      <a href="#methodology" class="nav-link">Methodology</a>
      <a href="#download" class="nav-link">Download Data</a>
      <a href="#api" class="nav-link">API Access</a>
    </nav>
  </div>
</header>
```

**Styling:**
- Height: 80px fixed
- Background: `var(--bg-elevated)` with backdrop-filter: blur(12px)
- Bottom border: 2px solid `var(--rush-primary)`
- Site title: 24px, font-weight: 700, color: `var(--text-primary)`
- Subtitle: 16px, font-weight: 500, color: `var(--rush-primary)`
- Nav links: 14px, uppercase, letter-spacing: 0.05em
- Hover effect: color transitions to `var(--rush-primary-light)`

### 2. Map Container Specifications
```javascript
const mapConfig = {
  container: 'map',
  style: 'mapbox://styles/mapbox/dark-v11',
  center: [-87.6298, 41.8781], // Chicago coordinates
  zoom: 10,
  minZoom: 8,
  maxZoom: 16,
  pitch: 0,
  bearing: 0,
  attributionControl: false // Custom attribution
};

// Custom map styling overrides
map.on('load', () => {
  // Darken the base map
  map.setPaintProperty('background', 'background-color', '#0a0a0a');
  
  // Reduce road visibility
  map.setPaintProperty('road-primary', 'line-opacity', 0.3);
  map.setPaintProperty('road-secondary', 'line-opacity', 0.2);
  
  // Emphasize water features
  map.setPaintProperty('water', 'fill-color', '#001f3f');
});
```

### 3. Control Panel (Top-Left)
```html
<div class="control-panel">
  <!-- Geographic Toggle -->
  <div class="control-group">
    <label class="control-label">Geographic View</label>
    <div class="toggle-buttons">
      <button class="toggle-btn active" data-view="census">
        <span class="icon">üìç</span>
        Census Tracts
        <span class="subtitle">Detailed boundaries</span>
      </button>
      <button class="toggle-btn" data-view="community">
        <span class="icon">üèòÔ∏è</span>
        Community Areas
        <span class="subtitle">77 neighborhoods</span>
      </button>
    </div>
  </div>
  
  <!-- Disease Filter -->
  <div class="control-group">
    <label class="control-label">Disease Category</label>
    <select class="select-input">
      <option value="diabetes">Diabetes (E10-E14)</option>
      <option value="hypertension">Hypertension (I10-I15)</option>
      <option value="heart">Heart Disease (I20-I25)</option>
      <option value="copd">COPD (J40-J44)</option>
      <option value="asthma">Asthma (J45)</option>
    </select>
  </div>
  
  <!-- Visualization Mode -->
  <div class="control-group">
    <label class="control-label">Data Display</label>
    <div class="radio-group">
      <label class="radio-option">
        <input type="radio" name="viz" value="count" checked>
        <span class="radio-label">Raw Counts</span>
        <span class="radio-desc">Total patients</span>
      </label>
      <label class="radio-option">
        <input type="radio" name="viz" value="rate">
        <span class="radio-label">Population Adjusted</span>
        <span class="radio-desc">Per 1,000 residents</span>
      </label>
    </div>
  </div>
  
  <!-- Data Quality Filter -->
  <div class="control-group">
    <label class="control-label">Data Quality</label>
    <label class="checkbox-option">
      <input type="checkbox" checked>
      <span>Show suppressed areas</span>
      <span class="help-icon" title="Areas with <11 patients">?</span>
    </label>
  </div>
</div>
```

**Control Panel Styling:**
- Width: 320px
- Background: `var(--bg-elevated)` with 95% opacity
- Border: 1px solid `var(--border-rush)`
- Border-radius: 12px
- Padding: 24px
- Box-shadow: 0 4px 24px rgba(0, 0, 0, 0.4)
- Backdrop-filter: blur(16px)

**Control Elements:**
- Labels: 12px uppercase, letter-spacing: 0.08em, color: `var(--text-tertiary)`
- Toggle buttons: 48px height, transition all 0.2s ease
- Active state: background `var(--rush-primary)`, color white
- Select inputs: 40px height, custom styled with Rush green focus ring
- Transitions: All interactive elements use 200ms ease transitions

### 4. Information Panel (Top-Right)
```html
<div class="info-panel" id="infoPanel">
  <div class="panel-header">
    <h3 class="area-name">Census Tract 17031010100</h3>
    <button class="close-btn" aria-label="Close panel">√ó</button>
  </div>
  
  <div class="panel-content">
    <!-- Population Metrics -->
    <section class="metric-section">
      <h4 class="section-title">Population Metrics</h4>
      <div class="metric-grid">
        <div class="metric-card">
          <span class="metric-label">2020 Population</span>
          <span class="metric-value">3,457</span>
        </div>
        <div class="metric-card">
          <span class="metric-label">Density</span>
          <span class="metric-value">8,234/sq mi</span>
        </div>
      </div>
    </section>
    
    <!-- Disease Prevalence -->
    <section class="metric-section">
      <h4 class="section-title">Disease Prevalence</h4>
      <div class="disease-grid">
        <div class="disease-card">
          <div class="disease-header">
            <span class="disease-name">Diabetes</span>
            <span class="icd-codes">E10-E14</span>
          </div>
          <div class="disease-metrics">
            <div class="primary-metric">
              <span class="metric-number">425</span>
              <span class="metric-unit">patients</span>
            </div>
            <div class="secondary-metric">
              <span class="rate">122.8 per 1,000</span>
            </div>
          </div>
          <div class="prevalence-bar" style="width: 61%"></div>
        </div>
        <!-- Repeat for other diseases -->
      </div>
    </section>
    
    <!-- Data Quality Indicator -->
    <section class="quality-section">
      <div class="quality-indicator">
        <span class="quality-label">Data Completeness</span>
        <div class="quality-bar">
          <div class="quality-fill" style="width: 95%"></div>
        </div>
        <span class="quality-value">95%</span>
      </div>
    </section>
  </div>
  
  <div class="panel-footer">
    <p class="data-source">Data: Capricorn Network ‚Ä¢ Population: 2020 US Census</p>
    <p class="last-updated">Last updated: December 2024</p>
  </div>
</div>
```

**Info Panel Styling:**
- Width: 380px
- Max-height: 600px with custom scrollbar
- Background: `var(--bg-elevated)` with 98% opacity
- Border: 1px solid `var(--border-rush)`
- Box-shadow: 0 8px 32px rgba(0, 0, 0, 0.5)
- Slide-in animation: translateX(400px) to translateX(0) over 300ms

### 5. Legend Component
```html
<div class="legend">
  <h4 class="legend-title">Disease Prevalence</h4>
  <div class="legend-scale">
    <div class="legend-gradient"></div>
    <div class="legend-labels">
      <span>0%</span>
      <span>5%</span>
      <span>10%</span>
      <span>15%</span>
      <span>20%+</span>
    </div>
  </div>
  <p class="legend-note">Per 1,000 residents</p>
</div>
```

### 6. Interactive Map Features

#### Hover Effects
```javascript
map.on('mousemove', 'census-tracts', (e) => {
  // Change cursor
  map.getCanvas().style.cursor = 'pointer';
  
  // Highlight feature
  map.setPaintProperty('census-tract-hover', 'fill-opacity', 0.8);
  
  // Show tooltip
  const tooltip = new mapboxgl.Popup({
    closeButton: false,
    closeOnClick: false,
    offset: [0, -10]
  });
  
  const props = e.features[0].properties;
  const content = `
    <div class="map-tooltip">
      <h5>${props.NAME}</h5>
      <div class="tooltip-metric">
        <span>Population:</span>
        <strong>${props.population.toLocaleString()}</strong>
      </div>
      <div class="tooltip-metric">
        <span>${selectedDisease}:</span>
        <strong>${props.patientCount} patients</strong>
      </div>
      <div class="tooltip-metric">
        <span>Rate:</span>
        <strong>${props.rate} per 1,000</strong>
      </div>
    </div>
  `;
  
  tooltip.setLngLat(e.lngLat)
    .setHTML(content)
    .addTo(map);
});
```

#### Click Interactions
```javascript
map.on('click', 'census-tracts', (e) => {
  const feature = e.features[0];
  
  // Smooth zoom to feature
  map.fitBounds(turf.bbox(feature), {
    padding: { top: 100, bottom: 100, left: 400, right: 450 },
    duration: 1000,
    easing: (t) => t * (2 - t) // ease-out-quad
  });
  
  // Highlight selected tract
  map.setPaintProperty('selected-tract', 'fill-color', [
    'case',
    ['==', ['get', 'GEOID'], feature.properties.GEOID],
    'var(--selection-bg)',
    'transparent'
  ]);
  
  // Update info panel with animation
  updateInfoPanel(feature.properties);
});
```

### 7. Data Visualization Colors

#### Heat Map Implementation
```javascript
const getHeatMapColors = (visualizationMode) => {
  if (visualizationMode === 'count') {
    return {
      property: 'patientCount',
      type: 'interval',
      stops: [
        [0, '#00674790'],      // 0 patients (transparent rush green)
        [1, '#006747'],        // 1-50 patients
        [50, '#4a8c2a'],       // 50-200 patients
        [200, '#a4c441'],      // 200-500 patients
        [500, '#f4e04d'],      // 500-1000 patients
        [1000, '#f76c5e']      // 1000+ patients
      ],
      default: '#333333'       // No data (dark gray)
    };
  } else {
    return {
      property: 'ratePerThousand',
      type: 'interval',
      stops: [
        [0, '#00674790'],      // 0-25 per 1,000
        [25, '#006747'],       // 25-50 per 1,000
        [50, '#4a8c2a'],       // 50-100 per 1,000
        [100, '#a4c441'],      // 100-150 per 1,000
        [150, '#f4e04d'],      // 150-200 per 1,000
        [200, '#f76c5e']       // 200+ per 1,000
      ],
      default: '#333333'
    };
  }
};

// Apply to map layer
map.setPaintProperty('census-tracts', 'fill-color', getHeatMapColors(mode));
```

### 8. Animations and Transitions

#### Page Load Animation
```css
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.control-panel { animation: fadeInUp 0.6s ease-out 0.2s both; }
.legend { animation: fadeInUp 0.6s ease-out 0.4s both; }
.header { animation: fadeInDown 0.6s ease-out; }
```

#### Toggle Transitions
```javascript
// Smooth layer transition
const transitionLayers = (from, to) => {
  // Fade out current layer
  map.setPaintProperty(from, 'fill-opacity', 0, {
    duration: 300,
    easing: 'ease-in'
  });
  
  setTimeout(() => {
    map.setLayoutProperty(from, 'visibility', 'none');
    map.setLayoutProperty(to, 'visibility', 'visible');
    
    // Fade in new layer
    map.setPaintProperty(to, 'fill-opacity', 0.7, {
      duration: 300,
      easing: 'ease-out'
    });
  }, 300);
};
```

### 9. Responsive Design Breakpoints
```css
/* Desktop (default) */
.control-panel { width: 320px; }
.info-panel { width: 380px; }

/* Tablet (768px - 1024px) */
@media (max-width: 1024px) {
  .control-panel { width: 280px; }
  .info-panel { width: 340px; }
  .header-nav { display: none; }
}

/* Mobile (< 768px) */
@media (max-width: 768px) {
  .control-panel {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    border-radius: 20px 20px 0 0;
    max-height: 50vh;
  }
  
  .info-panel {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    border-radius: 20px 20px 0 0;
    max-height: 70vh;
  }
}
```

### 10. Accessibility Features
```javascript
// Keyboard navigation
map.keyboard.enable();

// Screen reader announcements
const announceUpdate = (message) => {
  const announcement = document.createElement('div');
  announcement.setAttribute('role', 'status');
  announcement.setAttribute('aria-live', 'polite');
  announcement.className = 'sr-only';
  announcement.textContent = message;
  document.body.appendChild(announcement);
  setTimeout(() => announcement.remove(), 1000);
};

// Focus management
const focusTrap = createFocusTrap('.info-panel', {
  escapeDeactivates: true,
  fallbackFocus: '.close-btn'
});

// High contrast mode
const enableHighContrast = () => {
  document.body.classList.add('high-contrast');
  map.setPaintProperty('census-tracts', 'fill-outline-color', '#ffffff');
};
```

### 11. Error States and Loading
```html
<!-- Loading State -->
<div class="loading-overlay">
  <div class="loading-spinner"></div>
  <p class="loading-text">Loading health data...</p>
  <div class="loading-progress">
    <div class="progress-bar" style="width: 60%"></div>
  </div>
</div>

<!-- Error State -->
<div class="error-message">
  <span class="error-icon">‚ö†Ô∏è</span>
  <h4>Unable to load data</h4>
  <p>Please check your connection and try again.</p>
  <button class="retry-btn">Retry</button>
</div>

<!-- Empty State -->
<div class="empty-state">
  <p>No data available for this area.</p>
</div>
```

### 12. Performance Optimizations
```javascript
// Debounce hover events
const debouncedHover = debounce((e) => {
  updateHoverState(e);
}, 100);

// Viewport-based rendering
map.on('moveend', () => {
  const bounds = map.getBounds();
  loadVisibleData(bounds);
});

// Web Worker for calculations
const worker = new Worker('/workers/data-processor.js');
worker.postMessage({ 
  action: 'calculateRates',
  data: tractData 
});

// Cache layer data
const layerCache = new Map();
const getCachedLayer = (layerId) => {
  if (!layerCache.has(layerId)) {
    layerCache.set(layerId, fetchLayerData(layerId));
  }
  return layerCache.get(layerId);
};
```

## Data Flow Architecture

### 1. Initial Data Load Sequence
```javascript
const initializeApplication = async () => {
  try {
    // Show loading overlay
    showLoading('Initializing map...');
    
    // Step 1: Load geographic boundaries
    updateLoadingProgress(20, 'Loading geographic boundaries...');
    const [censusTracts, communityAreas] = await Promise.all([
      fetchCensusBoundaries(),
      loadCommunityAreasFromFile() // Client-provided file
    ]);
    
    // Step 2: Load population data
    updateLoadingProgress(40, 'Fetching 2020 Census data...');
    const populationData = await fetch2020CensusData();
    
    // Step 3: Load health data (mock for now)
    updateLoadingProgress(60, 'Processing health statistics...');
    const healthData = await fetchCapricornHealthData();
    
    // Step 4: Merge and calculate rates
    updateLoadingProgress(80, 'Calculating prevalence rates...');
    const processedData = mergeAndCalculateRates(
      censusTracts,
      communityAreas,
      populationData,
      healthData
    );
    
    // Step 5: Initialize map
    updateLoadingProgress(100, 'Rendering map...');
    await initializeMap(processedData);
    
    hideLoading();
  } catch (error) {
    showError(error.message);
  }
};
```

### 2. Census API Integration
```javascript
const fetch2020CensusData = async () => {
  const API_KEY = process.env.CENSUS_API_KEY;
  const counties = ['031', '043', '089', '097', '111', '197'];
  
  const requests = counties.map(county => 
    fetch(`https://api.census.gov/data/2020/dec/pl?get=NAME,P1_001N,GEOLAND&for=tract:*&in=state:17+county:${county}&key=${API_KEY}`)
      .then(res => res.json())
  );
  
  const results = await Promise.all(requests);
  return processCensusResults(results);
};
```

### 3. Community Areas File Integration
```javascript
const loadCommunityAreasFromFile = async () => {
  const response = await fetch('/data/chicago-community-areas.json');
  const geoData = await response.json();
  
  // Validate structure
  if (!geoData.type || geoData.type !== 'FeatureCollection') {
    throw new Error('Invalid GeoJSON format');
  }
  
  return geoData;
};
```

## Critical Implementation Notes

### Privacy and Data Display Rules
1. **Suppression Threshold**: Any geographic area with fewer than 11 patients must show "Data suppressed for privacy" instead of the actual count
2. **Aggregation Only**: Never display or calculate individual-level metrics
3. **Clear Attribution**: Always show "De-identified aggregate data from Capricorn Network"
4. **No Facility Names**: Never reference specific hospitals or health systems

### Academic Design Principles
1. **Data-First**: Emphasize data clarity over decorative elements
2. **High Information Density**: Pack meaningful data without clutter
3. **Professional Typography**: Clean, readable fonts with proper hierarchy
4. **Muted Interactions**: Subtle hover effects, no flashy animations
5. **Credibility Indicators**: Always show data sources, last updated dates, and methodology links

### Rush University Branding
1. **Primary Green (#006747)**: Use for key interactive elements and branding
2. **Logo Placement**: If provided, place in header left of title
3. **Academic Tone**: Formal but accessible language in all UI text
4. **Research Focus**: Design supports data exploration and analysis

## File Structure
```
chicago-disease-commons/
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îú‚îÄ‚îÄ index.html
‚îÇ   ‚îî‚îÄ‚îÄ data/
‚îÇ       ‚îî‚îÄ‚îÄ chicago-community-areas.json (CLIENT PROVIDED)
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Map.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ControlPanel.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ InfoPanel.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Legend.js
‚îÇ   ‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ census.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ mapbox.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ dataProcessor.js
‚îÇ   ‚îú‚îÄ‚îÄ styles/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ variables.css
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components.css
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ animations.css
‚îÇ   ‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ calculations.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ formatting.js
‚îÇ   ‚îî‚îÄ‚îÄ App.js
‚îú‚îÄ‚îÄ .env.example
‚îî‚îÄ‚îÄ README.md
```

## Success Metrics
- Initial load time < 3 seconds
- Smooth 60 FPS map interactions
- Zero accessibility violations (WCAG 2.1 AA)
- Mobile Lighthouse score > 90
- Support for 10,000+ census tracts
- Accurate rate calculations matching manual verification

## Deliverable Requirements
1. Fully functional interactive map with both geographic views
2. Complete dark mode UI with Rush branding
3. Population-adjusted rate calculations
4. Privacy-compliant data display
5. Responsive design for all devices
6. Comprehensive error handling
7. Documentation for data updates